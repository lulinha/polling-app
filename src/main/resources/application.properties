server.port=8081
spring.application.name=polls
spring.datasource.url=jdbc:postgresql://localhost:5432/polls
spring.datasource.username=postgres
spring.datasource.password=postgres
spring.jpa.show-sql=true

## Hibernate Properties
# The SQL dialect makes Hibernate generate better SQL for the chosen database
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect

# Hibernate ddl auto (create, create-drop, validate, update)
# none 避免 Hibernate 自动更新表结构。
# validate，以验证现有数据库表结构是否与实体类的定义一致。如果表结构不匹配，Hibernate 会抛出异常。这有助于确保数据库表结构的正确性。
spring.jpa.hibernate.ddl-auto=update
# SQL is written to be idempotent so this is safe
spring.sql.init.mode=always
spring.sql.init.schema-locations=classpath:schema.sql
spring.sql.init.data-locations=classpath:data.sql

# spring.sql.init.mode=always 的作用
# 作用: 指示 Spring Boot 在每次应用程序启动时，不管数据库中的内容如何，都会执行数据库初始化操作。
# 默认行为: 如果设置了 spring.sql.init.mode=always，Spring Boot 会按照以下顺序执行初始化操作：
# 执行 schema.sql 文件中的 SQL 脚本，用于创建数据库表结构。
# 执行 data.sql 文件中的 SQL 脚本，用于插入初始数据。


# 建议
# 开发环境
# spring.sql.init.mode=always：适用于需要每次启动时都初始化数据库的情况，确保数据库表结构和初始数据的一致性。
# spring.jpa.hibernate.ddl-auto=update：适用于需要自动更新数据库表结构的情况，保留现有数据。
# 生产环境
# spring.sql.init.mode=never：避免在生产环境中执行初始化脚本，防止数据丢失。
# spring.jpa.hibernate.ddl-auto=validate 或 none：确保数据库表结构与实体类定义一致，避免自动更新数据库表结构。


## Jackson Properties
spring.jackson.serialization.write-dates-as-timestamps=false
spring.jackson.deserialization.adjust-dates-to-context-time-zone=true
spring.jackson.time-zone=UTC

# Kafka 配置
spring.kafka.bootstrap-servers=localhost:9092

# 消费者配置
spring.kafka.consumer.auto-offset-reset=earliest
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer=org.apache.kafka.common.serialization.StringDeserializer

# 生产者配置
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.retries=3
spring.kafka.producer.retry-backoff-ms=1000

# Kafka 事务配置
spring.kafka.producer.transaction-id-prefix=tx-
spring.kafka.producer.enable-idempotence=true

# 消费者并发度
spring.kafka.listener.concurrency=3
## App Properties
app.jwtSecret= 9a02115a835ee03d5fb83cd8a468ea33e4090aaaec87f53c9fa54512bbef4db8dc656c82a315fa0c785c08b0134716b81ddcd0153d2a7556f2e154912cf5675f
app.jwtExpirationInMs = 604800000

# Comma separated list of allowed origins
app.cors.allowedOrigins = http://localhost:3000

# 启用 Swagger
springdoc.swagger-ui.enabled=true
# 自定义 Swagger UI 路径
springdoc.swagger-ui.path=/swagger-ui.html
# 接口分组配置
#springdoc.group-configs[0].group=user
#springdoc.group-configs[0].paths-to-match=/api/users/**
#springdoc.group-configs[0].packages-to-scan=com.example.user

api.title=Polls
api.description=One spring boot project
api.version=1.1.0

# Redis 配置
spring.redis.host=localhost
spring.redis.port=6379
#spring.redis.password=your-password
spring.redis.lettuce.pool.max-active=8
spring.redis.lettuce.pool.max-idle=8
spring.redis.lettuce.pool.min-idle=0
spring.redis.lettuce.pool.max-wait=-1ms

# 缓存配置
spring.cache.type=redis
spring.cache.redis.time-to-live=30m
spring.cache.redis.cache-null-values=false